# movCir

import pygame
import random
import math

# Needed to initialize pygame
pygame.init()

# Define some Constants
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0,0,255)
YELLOW = (255,255,0)
ORANGE = (255,165,0)

SCREEN_WIDTH = 700
SCREEN_HEIGHT = 500

# Create a screen
size = [SCREEN_WIDTH,SCREEN_HEIGHT]
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Move Circles")

# Used to manage how fast the screen updates
clock = pygame.time.Clock()

#COOKIE CLASS
class Cookie():
    def __init__(self,x,y,width,height,colour):
        global SCREEN_WIDTH
        global SCREEN_HEIGHT
        
        self.x = x
        self.y = y
        self.colour = colour
        self.w = width
        self.h = height

  
    def draw(self,screen):
        pygame.draw.ellipse(screen,self.colour,[self.x,self.y,self.w,self.h])

    def getInfo(self):
        return[self.x,self.y,self.w,self.h]

#INO function
def inO(mX,mY,O):
    if mX >= O.x and mX <= O.x + O.w and mY >= O.y and mY <= O.y + O.h:
        return True
    else:
        return False

#Variables
lCircle = []
lCircle.append(Cookie(50,150,50,50,WHITE))
add = Cookie(50,50,50,50,GREEN)
remove = Cookie(50,350,50,50,RED)
lCirPos = []

#Boolean
clnDrag = False
curCir = None

#Line and Angle
lX = 300
lY = 300

angle = 270
angleM = 270
angleH = 270
sec = 0
minU= 0
hour = 0

#Loop until the user clicks the close button.
loop = True

# -------- Main Program Loop -----------
while loop:
    # EVENT PROCESSING
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            loop = False

        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            for circles in lCircle:
                if inO(mouseX,mouseY,circles):
                    curCir = circles
                    clnDrag = True
                    
            if inO(mouseX,mouseY,add):
                lCircle.append(Cookie(50,150,50,50,WHITE))

            if len(lCircle) != 0:
                if inO(mouseX,mouseY,remove):
                    lCircle.remove(lCircle[len(lCircle)-1])

        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 3:
            for circles in lCircle:
                if inO(mouseX,mouseY,circles):
                    circles.w += 5
                    circles.h += 5

        elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:
            clnDrag = False

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                lCirPos = []
                for circles in lCircle:
                    lCirPos.append([circles.x,circles.y])
                print(lCirPos)
            


    # RUN LOGIC         
    # Mouse Position and Click
    mousePosition = pygame.mouse.get_pos()
    mouseX = mousePosition[0]
    mouseY = mousePosition[1]

    if clnDrag:
        curCir.x = mouseX - curCir.w // 2
        curCir.y = mouseY - curCir.h // 2

    for circle in lCircle:
        circle.x += 0.5
        circle.y += 0.5

    angle += 6
    sec += 1
    
    lineXs = lX + math.cos(math.radians(angle)) * 150
    lineYs = lY + math.sin(math.radians(angle)) * 150

    if sec == 60:
        sec = 0
        angleM += 6
        minU += 1

    lineXm = lX + math.cos(math.radians(angleM)) * 100
    lineYm = lY + math.sin(math.radians(angleM)) * 100

    if minU == 60:
        minU = 0
        angleH += 6
        hour += 1

    lineXh = lX + math.cos(math.radians(angleH)) * 50
    lineYh = lY + math.sin(math.radians(angleH)) * 50
    

    # DRAW COMMANDS
    screen.fill(BLACK)

    font = pygame.font.SysFont('serif',20)
   
    for circle in lCircle:
        text = font.render(str(lCircle.index(circle)), True, WHITE)
        screen.blit(text,[circle.x, circle.y])
        circle.draw(screen)

    add.draw(screen)
    remove.draw(screen)

    pygame.draw.line(screen,WHITE,[lX,lY],[lineXs,lineYs],7)
    pygame.draw.line(screen,YELLOW,[lX,lY],[lineXm,lineYm],7)
    pygame.draw.line(screen,ORANGE,[lX,lY],[lineXh,lineYh],7)

    text1 = font.render(str(sec), True, GREEN)
    screen.blit(text1,[lineXs,lineYs])
    text2 = font.render(str(minU), True, GREEN)
    screen.blit(text2,[lineXm,lineYm])
    text3 = font.render(str(hour), True, GREEN)
    screen.blit(text3,[lineXh,lineYh])
    

    # Update Screen
    pygame.display.flip()

    # Set frames per second
    clock.tick(30)
# -------- End of Main Program Loop --------


# Close the window and quit.
pygame.quit()
